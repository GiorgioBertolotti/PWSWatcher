import 'dart:async';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:pws_watcher/main.dart';
import 'package:pws_watcher/model/source.dart';
import 'package:pws_watcher/model/state.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:showcaseview/showcase_widget.dart';
import 'package:showcaseview/showcaseview.dart';

class AddSourceDialog extends StatefulWidget {
  AddSourceDialog(this.context);

  final BuildContext context;

  @override
  _AddSourceDialogState createState() => _AddSourceDialogState();
}

class _AddSourceDialogState extends State<AddSourceDialog> {
  final GlobalKey<FormState> _addFormKey = GlobalKey<FormState>();
  final GlobalKey _urlKey = GlobalKey();
  final GlobalKey _helpKey = GlobalKey();

  final _addNameController = TextEditingController();
  final _addUrlController = TextEditingController();
  final _addIntervalController = TextEditingController();

  BuildContext _showCaseContext;

  @override
  void initState() {
    super.initState();
    _shouldShowcase().then((shouldShow) {
      if (shouldShow) {
        ShowCaseWidget.of(_showCaseContext).startShowCase([_urlKey, _helpKey]);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text("Add source"),
      content: ShowCaseWidget(
        builder: Builder(builder: (context) {
          _showCaseContext = context;
          return Form(
            key: _addFormKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: TextFormField(
                    controller: _addNameController,
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 18,
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty)
                        return "You must set a source name.";
                      return null;
                    },
                    decoration: InputDecoration.collapsed(
                        hintText: "Source name",
                        border: UnderlineInputBorder()),
                    maxLines: 1,
                  ),
                ),
                Container(
                  height: 60.0,
                  child: Row(
                    children: <Widget>[
                      Container(
                        width: 60.0,
                        height: MediaQuery.of(context).size.width,
                        child: Showcase(
                          key: _urlKey,
                          title: "Enter URL",
                          description:
                              "Enter here the URL of the file generated by your PWS",
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: TextFormField(
                              keyboardType: TextInputType.url,
                              controller: _addUrlController,
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 18,
                              ),
                              validator: (value) {
                                if (value == null || value.isEmpty)
                                  return "You must set a source url.";
                                return null;
                              },
                              decoration: InputDecoration.collapsed(
                                  hintText: "Realtime file URL",
                                  border: UnderlineInputBorder()),
                              maxLines: 1,
                            ),
                          ),
                        ),
                      ),
                      Container(
                        width: 40.0,
                        height: 40.0,
                        child: Showcase(
                          key: _urlKey,
                          title: "Enter URL",
                          description:
                              "Enter here the URL of the file generated by your PWS",
                          shapeBorder: CircleBorder(),
                          child: Container(
                            alignment: Alignment.center,
                            padding: const EdgeInsets.all(8.0),
                            child: GestureDetector(
                              child: Icon(
                                Icons.help,
                              ),
                              onTap: () {
                                // TODO: Show help
                              },
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.all(8.0),
                  child: TextFormField(
                    keyboardType: TextInputType.number,
                    controller: _addIntervalController,
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 18,
                    ),
                    validator: (value) {
                      if (value == null ||
                          value.isEmpty ||
                          int.tryParse(value) == null ||
                          int.tryParse(value) < 0)
                        return "Please set a valid interval.";
                      return null;
                    },
                    decoration: InputDecoration.collapsed(
                        hintText: "Refresh interval (sec).",
                        border: UnderlineInputBorder()),
                    maxLines: 1,
                  ),
                ),
              ],
            ),
          );
        }),
      ),
      actions: <Widget>[
        FlatButton(
          textColor: Theme.of(widget.context).buttonColor,
          child: Text("Close"),
          onPressed: () {
            Navigator.of(widget.context).pop();
          },
        ),
        FlatButton(
          textColor: Colors.white,
          color: Theme.of(widget.context).buttonColor,
          child: Text("Add"),
          onPressed: () async {
            FocusScope.of(context).requestFocus(FocusNode());
            if (_addFormKey.currentState.validate()) {
              _addFormKey.currentState.save();
              Source source = Source(
                  Provider.of<ApplicationState>(
                    context,
                    listen: false,
                  ).countID++,
                  _addNameController.text,
                  _addUrlController.text,
                  autoUpdateInterval: int.parse(_addIntervalController.text));
              PWSWatcher.navigatorKey.currentState.pop(source);
            }
          },
        ),
      ],
    );
  }

  Future<bool> _shouldShowcase() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return !(prefs.getBool("coach_mark_shown") ?? false);
  }
}
